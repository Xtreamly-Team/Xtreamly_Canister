type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
    status : nat;
    body : vec nat8;
    headers : vec HttpHeader;
};
type Result = variant { Ok : text; Err : text };
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : {
    create_vc_self_presented: (text, text ) -> (text)  ;
    present_did_address : (text, text) -> (bool) ;
    get_vc : (text, text, text, text) -> (text) ;
    create_new_proxy_account: (text) -> (text) ;
    get_block : (opt nat64) -> (Result);
    get_canister_addr : () -> (Result);
    get_eth_balance : (text) -> (Result);
    get_eth_gas_price : () -> (Result);
    rpc_call : (text) -> (Result);
    send_eth : (text, nat64) -> (Result);
    send_ERC20_token_from : (text, text, nat64, text) -> (Result);
    ERC20_token_balance : (text, text) -> (Result);
    transform : (TransformArgs) -> (HttpResponse) query;
    execute_script : (text , text, text) -> (text);
    remove_proxy_account : (text) -> (bool);
}
